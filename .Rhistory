# geom_link_fun parece más apropiado
graph_last <- ggraph(net_last, layout = "kk") +
geom_edge_fan(aes(check_overlap = TRUE),
alpha = 0.4) +
geom_node_point(aes(fill = cuanti_docente_siglas,
size = node_centrality_degree),
shape = 21) +
geom_node_text(aes(label = siglas),
check_overlap = TRUE,
repel = TRUE,
alpha = 0.7) +
scale_color_continuous(guide = 'legend') +
labs(
title = "Quien conoce a quien?",
subtitle = "Estudiantes del ultimo cuatrimestre",
fill = "Comisiones",
size = "Grado de centralidad") +
theme_graph() +
theme(legend.key.size = unit(10, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size = 14), #change legend title font size
legend.text = element_text(size = 14)) #change legend text font size
graph_last
ggsave(here("Outputs", "graph_last.png"))
# En este link hay varias buenas opciones de gráficos
# http://users.dimi.uniud.it/~massimo.franceschet/ns/syllabus/make/tidygraph/tidygraph.html
#| label: graph_last
#| echo: false
#| warning: false
#| output: true
#| fig.width: 7
#| fig.height: 7
# No uso geom_edge_link porque algunas elecciones son bidireccionales
# geom_link_fun parece más apropiado
graph_last <- ggraph(net_last, layout = "kk") +
geom_edge_fan(aes(check_overlap = TRUE),
alpha = edge_centrality_betw) +
geom_node_point(aes(fill = cuanti_docente_siglas,
size = node_centrality_degree),
shape = 21) +
geom_node_text(aes(label = siglas),
check_overlap = TRUE,
repel = TRUE,
alpha = 0.7) +
scale_color_continuous(guide = 'legend') +
labs(
title = "Quien conoce a quien?",
subtitle = "Estudiantes del ultimo cuatrimestre",
fill = "Comisiones",
size = "Grado de centralidad") +
theme_graph() +
theme(legend.key.size = unit(10, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size = 14), #change legend title font size
legend.text = element_text(size = 14)) #change legend text font size
#| label: graph_last
#| echo: false
#| warning: false
#| output: true
#| fig.width: 7
#| fig.height: 7
# No uso geom_edge_link porque algunas elecciones son bidireccionales
# geom_link_fun parece más apropiado
graph_last <- ggraph(net_last, layout = "kk") +
geom_edge_fan(aes(check_overlap = TRUE,
alpha = edge_centrality_betw)) +
geom_node_point(aes(fill = cuanti_docente_siglas,
size = node_centrality_degree),
shape = 21) +
geom_node_text(aes(label = siglas),
check_overlap = TRUE,
repel = TRUE,
alpha = 0.7) +
scale_color_continuous(guide = 'legend') +
labs(
title = "Quien conoce a quien?",
subtitle = "Estudiantes del ultimo cuatrimestre",
fill = "Comisiones",
size = "Grado de centralidad") +
theme_graph() +
theme(legend.key.size = unit(10, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size = 14), #change legend title font size
legend.text = element_text(size = 14)) #change legend text font size
graph_last
ggsave(here("Outputs", "graph_last.png"))
# En este link hay varias buenas opciones de gráficos
# http://users.dimi.uniud.it/~massimo.franceschet/ns/syllabus/make/tidygraph/tidygraph.html
#| label: graph_last
#| echo: false
#| warning: false
#| output: true
#| fig.width: 7
#| fig.height: 7
# No uso geom_edge_link porque algunas elecciones son bidireccionales
# geom_link_fun parece más apropiado
graph_last <- ggraph(net_last, layout = "kk") +
geom_edge_fan(aes(check_overlap = TRUE,
alpha = edge_centrality_betw)) +
geom_node_point(aes(fill = cuanti_docente_siglas,
size = node_centrality_degree),
shape = 21) +
geom_node_text(aes(label = siglas),
check_overlap = TRUE,
repel = TRUE,
alpha = 0.7) +
scale_color_continuous(guide = 'legend') +
labs(
title = "Quien conoce a quien?",
subtitle = "Estudiantes del ultimo cuatrimestre",
fill = "Comisiones",
size = "Grado de centralidad",
alpha = "Intermediación") +
theme_graph() +
theme(legend.key.size = unit(10, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size = 14), #change legend title font size
legend.text = element_text(size = 14)) #change legend text font size
graph_last
ggsave(here("Outputs", "graph_last.png"))
# En este link hay varias buenas opciones de gráficos
# http://users.dimi.uniud.it/~massimo.franceschet/ns/syllabus/make/tidygraph/tidygraph.html
#| label: graph_last
#| echo: false
#| warning: false
#| output: true
#| fig.width: 7
#| fig.height: 7
# No uso geom_edge_link porque algunas elecciones son bidireccionales
# geom_link_fun parece más apropiado
graph_last <- ggraph(net_last, layout = "kk") +
geom_edge_fan(aes(check_overlap = TRUE,
alpha = edge_centrality_betw)) +
geom_node_point(aes(fill = cuanti_docente_siglas,
size = node_centrality_degree),
shape = 21) +
geom_node_text(aes(label = siglas),
check_overlap = TRUE,
repel = TRUE,
alpha = 0.7) +
scale_color_continuous(guide = 'legend') +
labs(
title = "Quien conoce a quien?",
subtitle = "Estudiantes del ultimo cuatrimestre",
alpha = "Intermediación",
fill = "Comisiones",
size = "Grado de centralidad") +
theme_graph() +
theme(legend.key.size = unit(10, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size = 14), #change legend title font size
legend.text = element_text(size = 14)) #change legend text font size
graph_last
ggsave(here("Outputs", "graph_last.png"))
# En este link hay varias buenas opciones de gráficos
# http://users.dimi.uniud.it/~massimo.franceschet/ns/syllabus/make/tidygraph/tidygraph.html
#| label: graph_last
#| echo: false
#| warning: false
#| output: true
#| fig.width: 7
#| fig.height: 7
# No uso geom_edge_link porque algunas elecciones son bidireccionales
# geom_link_fun parece más apropiado
graph_last <- ggraph(net_last, layout = "kk") +
geom_edge_fan(aes(check_overlap = TRUE,
alpha = edge_centrality_betw)) +
geom_node_point(aes(fill = cuanti_docente_siglas,
size = node_centrality_degree),
shape = 21) +
geom_node_text(aes(label = siglas),
check_overlap = TRUE,
repel = TRUE,
alpha = 0.7) +
scale_color_continuous(guide = 'legend') +
labs(
title = "Quien conoce a quien?",
subtitle = "Estudiantes del ultimo cuatrimestre",
edge_alpha = "Intermediación",
fill = "Comisiones",
size = "Grado de centralidad") +
theme_graph() +
theme(legend.key.size = unit(10, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size = 14), #change legend title font size
legend.text = element_text(size = 14)) #change legend text font size
graph_last
ggsave(here("Outputs", "graph_last.png"))
# En este link hay varias buenas opciones de gráficos
# http://users.dimi.uniud.it/~massimo.franceschet/ns/syllabus/make/tidygraph/tidygraph.html
#| label: graph_last
#| echo: false
#| warning: false
#| output: true
#| fig.width: 7
#| fig.height: 7
# No uso geom_edge_link porque algunas elecciones son bidireccionales
# geom_link_fun parece más apropiado
graph_last <- ggraph(net_last, layout = "kk") +
geom_edge_fan(aes(check_overlap = TRUE,
alpha = edge_centrality_betw)) +
geom_node_point(aes(fill = cuanti_docente_siglas,
size = node_centrality_degree),
shape = 21) +
geom_node_text(aes(label = siglas),
check_overlap = TRUE,
repel = TRUE,
alpha = 0.7) +
scale_color_continuous(guide = 'legend') +
labs(
title = "Quien conoce a quien?",
subtitle = "Estudiantes del ultimo cuatrimestre",
edge_alpha = "Grado de intermediación",
fill = "Comisiones",
size = "Grado de centralidad") +
theme_graph() +
theme(legend.key.size = unit(10, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size = 14), #change legend title font size
legend.text = element_text(size = 14)) #change legend text font size
graph_last
ggsave(here("Outputs", "graph_last.png"))
# En este link hay varias buenas opciones de gráficos
# http://users.dimi.uniud.it/~massimo.franceschet/ns/syllabus/make/tidygraph/tidygraph.html
#| label: net_last
# Se programa para siempre realizar el análisis sobre la última cursada
# Pongo a todos los que se inscribieron porque quizá en una comisión son pocos
# y pocos se conocen.
net_last <- net |>
activate(nodes) |>
filter(unaj_ano_lectivo == max(unaj_ano_lectivo)) |>
filter(unaj_periodo_lectivo_num == max(unaj_periodo_lectivo_num)) |>
mutate(node_prestige = centrality_eigen(
directed = TRUE),
node_centrality_betw = centrality_betweenness(),
node_centrality_degree = centrality_degree(
mode = "in",
loops = F,),
siglas = str_sub(redes_tu_nombre, start = 1L, end = 5L),
node_comunidad = as.factor(group_components())) |>
activate(edges) |>
mutate(edge_centrality_betw = centrality_edge_betweenness())
#| label: net_last
# Se programa para siempre realizar el análisis sobre la última cursada
# Pongo a todos los que se inscribieron porque quizá en una comisión son pocos
# y pocos se conocen.
net_last <- net |>
activate(nodes) |>
filter(unaj_ano_lectivo == max(unaj_ano_lectivo)) |>
filter(unaj_periodo_lectivo_num == max(unaj_periodo_lectivo_num)) |>
mutate(node_influence = centrality_eigen(
directed = TRUE),
node_centrality_betw = centrality_betweenness(),
node_centrality_degree = centrality_degree(
mode = "in",
loops = F,),
siglas = str_sub(redes_tu_nombre, start = 1L, end = 5L),
node_comunidad = as.factor(group_components())) |>
activate(edges) |>
mutate(edge_centrality_betw = centrality_edge_betweenness())
View(net_last_nodes)
#| label: net_last
# Se programa para siempre realizar el análisis sobre la última cursada
# Pongo a todos los que se inscribieron porque quizá en una comisión son pocos
# y pocos se conocen.
net_last <- net |>
activate(nodes) |>
filter(unaj_ano_lectivo == max(unaj_ano_lectivo)) |>
filter(unaj_periodo_lectivo_num == max(unaj_periodo_lectivo_num)) |>
mutate(node_centrality_influence = centrality_eigen(
directed = TRUE),
node_centrality_betw = centrality_betweenness(),
node_centrality_degree = centrality_degree(
mode = "in",
loops = F,),
siglas = str_sub(redes_tu_nombre, start = 1L, end = 5L),
node_comunidad = as.factor(group_components())) |>
activate(edges) |>
mutate(edge_centrality_betw = centrality_edge_betweenness())
#| label: net_last_nodes_&_edges
#| echo: false
#| warning: false
#| output: true
# Sirve para chequear
net_last_nodes <- net_last |>
activate(nodes) |>
select(redes_tu_nombre,
redes_1_contacto,
redes_2_contacto,
redes_3_contacto,
redes_4_contacto,
redes_5_contacto,
siglas,
node_centrality_influence,
node_centrality_betw,
node_centrality_degree,
cuanti_docente_siglas) |>
as_tibble()
net_last_edges <- net_last |>
activate(edges) |>
as_tibble()
#| label: tb_nodos
tb_nodos <- net_last |>
activate(nodes) |>
as_tibble() |>
select(siglas,
node_centrality_influence,
node_centrality_betw,
node_centrality_degree) |>
arrange(desc(node_centrality_degree)) |>
gt()
#| label: librerias_redes
library(tidygraph)
library(ggraph)
library(stringr)
library(tidyverse)
library(here)
library(gt)
#| label: tb_nodos
tb_nodos <- net_last |>
activate(nodes) |>
as_tibble() |>
select(siglas,
node_centrality_influence,
node_centrality_betw,
node_centrality_degree) |>
arrange(desc(node_centrality_degree)) |>
gt()
tb_nodos
#| label: tb_nodos
tb_nodos <- net_last |>
activate(nodes) |>
as_tibble() |>
select(siglas,
node_centrality_degree,
node_centrality_betw,
node_centrality_influence) |>
arrange(desc(node_centrality_degree)) |>
gt() |>
cols_label(
node_centrality_degree = "G. centralidad",
node_centrality_betw = "G. intermediación",
node_centrality_influence = "G. de influencia")
tb_nodos
#| label: tb_nodos
tb_nodos <- net_last |>
activate(nodes) |>
as_tibble() |>
select(siglas,
node_centrality_degree,
node_centrality_betw,
node_centrality_influence) |>
arrange(desc(node_centrality_degree)) |>
gt() |>
cols_label(
node_centrality_degree = "G. centralidad",
node_centrality_betw = "G. intermediación",
node_centrality_influence = "G. de influencia") |>
fmt_number(c(node_centrality_betw,
node_centrality_influence),
decimals = 1)
tb_nodos
#| label: tb_nodos
tb_nodos <- net_last |>
activate(nodes) |>
as_tibble() |>
select(siglas,
node_centrality_degree,
node_centrality_betw,
node_centrality_influence) |>
arrange(desc(node_centrality_degree)) |>
slice(1:10) |>
gt() |>
cols_label(
node_centrality_degree = "G. centralidad",
node_centrality_betw = "G. intermediación",
node_centrality_influence = "G. de influencia") |>
fmt_number(c(node_centrality_betw,
node_centrality_influence),
decimals = 1)
tb_nodos
#| label: tb_nodos
tb_nodos <- net_last |>
activate(nodes) |>
as_tibble() |>
select(siglas,
node_centrality_degree,
node_centrality_betw,
node_centrality_influence) |>
arrange(desc(node_centrality_degree)) |>
slice(1:10) |>
gt() |>
cols_label(
siglas = "Estudiante",
node_centrality_degree = "G. centralidad",
node_centrality_betw = "G. intermediación",
node_centrality_influence = "G. de influencia") |>
fmt_number(c(node_centrality_betw,
node_centrality_influence),
decimals = 1)
tb_nodos
#| label: net_last
# Se programa para siempre realizar el análisis sobre la última cursada
# Pongo a todos los que se inscribieron porque quizá en una comisión son pocos
# y pocos se conocen.
net_last <- net |>
activate(nodes) |>
filter(unaj_ano_lectivo == max(unaj_ano_lectivo)) |>
filter(unaj_periodo_lectivo_num == max(unaj_periodo_lectivo_num)) |>
mutate(node_centrality_influence = centrality_eigen(
directed = TRUE),
node_centrality_betw = centrality_betweenness(
normalized = TRUE),
node_centrality_degree = centrality_degree(
mode = "in",
loops = F,),
siglas = str_sub(redes_tu_nombre, start = 1L, end = 5L),
node_comunidad = as.factor(group_components())) |>
activate(edges) |>
mutate(edge_centrality_betw = centrality_edge_betweenness())
#| label: librerias_geo
#| include: false
library(dplyr)
library(readr)
library(stringr)
library(tidygeocoder)
library(sf)
library(mapview)
library(here)
#| label: insumo_geo
#| include: false
# Levanto el dataset de la encuesta
df_encuesta <- read_rds(here::here("Outputs", "df_encuesta.rds"))
#| label: librerias_geo
#| include: false
library(dplyr)
library(readr)
library(stringr)
library(tidygeocoder)
library(sf)
library(mapview)
library(here)
#| label: insumo_geo
#| include: false
# Levanto el dataset de la encuesta
df_encuesta <- read_rds(here::here("Outputs", "df_encuesta.rds"))
#| label: geo_cleaning
#| include: false
df_mapa <- df_encuesta |>
select(dni,
viv_calle,
viv_altura,
viv_partido) |>
mutate(viv_provincia = "Buenos Aires",
viv_pais = "Argentina",
viv_calle_ok = if_else(str_starts(viv_calle, "[0-9]"),
str_glue("Calle {viv_calle}"),
viv_calle),
viv_calle_ok = str_replace(viv_calle_ok, "entre.*$", ""), # Saco los "entre"
viv_calle_ok = str_replace(viv_calle_ok, "[.][0-9]+$", ""), # Saco los decimales
street = as.character(str_glue("{viv_altura} {viv_calle_ok}")))
#| include: false
geo <- geo(street = df_mapa$street,
county = df_mapa$viv_partido,
state = df_mapa$viv_provincia,
country = df_mapa$viv_pais,
method = 'osm',
lat = latitude ,
long = longitude,
full_results = FALSE,
progress_bar = TRUE)
lat_long <- df_mapa |>
bind_cols(geo) |>
write_rds(here("Outputs","lat_long.rds"))
lat_long_sf <- lat_long |>
filter(!is.na(latitude)) |>
st_as_sf(
coords = c("longitude", "latitude"),
crs = 4326,
dim = "XY") |>
left_join(df_encuesta, by = "dni") |>
filter(cuanti_docente == "Diego Quartulli") |>
write_rds(here("Outputs","lat_long_sf.rds"))
unaj <- data.frame(longitude = -58.267885007422926,
latitude = -34.7752210576336) |>
st_as_sf(coords = c("longitude", "latitude"),
crs = 4326,
dim = "XY")
# Extraigo la geometría
lat_long_g <- st_geometry(lat_long_sf)
convex_hull <- lat_long_sf |>
summarise(estudiantes = st_combine(geometry))|>
mutate(
convex_hull = st_convex_hull(estudiantes)) |>
st_set_geometry("convex_hull") |>
select(convex_hull)
centroide <- lat_long_sf |>
summarise(estudiantes = st_combine(geometry)) |>
mutate(
centroide = st_centroid(estudiantes)) |>
st_set_geometry("centroide") |>
select(centroide)
lat_long_sf <- lat_long_sf |>
mutate(distancia = st_distance(geometry, unaj, by_element = TRUE))
View(unaj)
