{"title":"Análisis de textos","markdown":{"headingText":"Análisis de textos","containsRefs":false,"markdown":"\n```{r text_librerias}\n\nlibrary(stringr)\nlibrary(tidytext)\nlibrary(hunspell) # Funciona mejor para el español. Uso la versión de desarrollo porque\n# funciona mejor los diccionario en rstudio\n#devtools::install_github(\"ropensci/hunspell\", force = TRUE)\nlibrary(purrr)\nlibrary(tidyverse)\n           \n```\n\n```{r text_insumo}\n# Levanto el dataset de la encuesta\n\ndf_encuesta <- read_rds(here::here(\"Outputs\", \"df_encuesta.rds\"))\n```\n\n## Insumos de la encuesta\n\nEl insumo de estos análisis es una serie de preguntas de respuesta abierta. Sin embargo, dado el formato específico de la pregunta se trata de un dato que, si bien no puede considerarse estructurado, se aleja un poco de otros ejemplos de datos no estructurados como los textos provenientes de entrevistas en profundidad, de canciones o de discursos presidenciales.\n\n![pregunta_texto](Inputs/Images/preguntas_texto.png){width=\"600\"}\n\nEn este caso, como puede observarse en la imagen se trata de 3 palabras por cada encuestado. Expresado en el léxico de una matriz de datos (o base de casos x variables), se trata de 3 columnas por cada fila.\n\n## Preparación de los datos\n\nPara facilitar el siguiente análisis lo que primero debemos realizar es un \"alargamiento\" de la base de datos original para pasar a tener una sola columna y más filas que, en principio, se repetirían 3 veces.\n\n```{r text_longer}\n\ndf_longer <- df_encuesta |>\n             select(dni, \n                    unaj_ano_ingreso,\n                    unaj_n_materias_aprobadas_10,\n                    unaj_n_materias_aprobadas_15,\n                    sexo,\n                    hog_convivencia_hijes,\n                    cuanti_1_palabra, \n                    cuanti_2_palabra, \n                    cuanti_3_palabra) |>\n             pivot_longer(c(cuanti_1_palabra,\n                          cuanti_2_palabra,\n                          cuanti_3_palabra),\n                          names_to = \"orden_palabra\",\n                          values_to = \"cuanti_palabras\")\n                      \n```\n\nLuego, sigue el proceso de limpieza de las palabras. Se pasa todo a minúscula, se eliminan los puntos, los números y toda palabra vacía de significado como los pronombres, artículos y preposiciones. Finalmente se hace un proceso en donde se intenta llevar todas las palabras a su raíz (*stemming*) para así poder interpretar como una misma palabra a palabras que, por ejemplo, cambian el género (gato, gata) o el número (gato, gatos). Ahora sí, ya estamos en mejores condiciones de empezar nuestro análisis del texto.\n\n```{r cleaning_palabras_cuanti}\n\n# Comienzo el proceso de transformación desde cuanti_palabras a cuanti_palabras_ok\n# Se sacan los puntos\n# Se pasa todo a minúscula. Es importante porque el stemming y las stopword funcionan mejor\n# Se sacan las stopwords\n# Se hace el stemming\n# Se sacan los acentos. Esto va a lo último porque modifica el stemming.\n\n# Se sacan las \"s\"\n# Se sacan las stopword (quanteda tiene uno bueno pero primera hay que token)\n# Tidytext tiene un wraping para la funcion stopword del paquete stopwords\n# El proceso de stemming lo hago con hunspell en vez de que con snowball. \n# \n# Cambio a mano el diccionario de hunspell y luego lo especifico en el código\n\n# Creo in objeto con los stopword. Uso tidytext para hacer un antijoint pero la base de datos\n# sale del paquete stopwords que, a su turno, levanta base de distintos lugares.\n# El stopword lo uso luego de poner las palabras en minúsculas\n\ncuanti_stopwords <- get_stopwords(language = \"es\", source = \"nltk\") |> # Por ahora nltk tiene más palabras\n                    rename(cuanti_stopwords = word)\n\ndf_longer <- df_longer |>\nmutate(\ncuanti_palabras_ok = str_replace(cuanti_palabras, \"[.]+$\", \"\"), # Saco los puntos\ncuanti_palabras_ok = str_to_lower(cuanti_palabras_ok)) # Todo a minuscula\n\ndf_longer <- df_longer |> \nanti_join(cuanti_stopwords, by = c(\"cuanti_palabras_ok\" = \"cuanti_stopwords\")) # Stopwords\n\n# Antes del stemming pruebo con el corrector de palabras\n# \n# Si previamente el (nuevo) diccionario ya está creado se buscar como un nuevo lenguaje de diccionario\n# Me sirve para stemming\n\ncuanti_diccionario <- hunspell::dictionary(lang = \"es_ES_delta\")\n\ndf_longer <- df_longer |>\nmutate(\ncuanti_palabras_analyze = hunspell_analyze(cuanti_palabras_ok, cuanti_diccionario),\ncuanti_palabras_check = hunspell_check(cuanti_palabras_ok, cuanti_diccionario),\ncuanti_palabras_suggest = hunspell_suggest(cuanti_palabras_ok, cuanti_diccionario))\n\n# La idea es la siguiente:\n# Si el check dió false, va la (única) palabra que salió en suggest.\n# Si el check dió true, va la primera palabra de la lista\n\n#df_longer$cuanti_palabras_suggest #df_longer$cuanti_palabras_suggest[sapply(length(df_longer$cuanti_palabras_suggest == 0))] #if_else(df_longer$cuanti_palabras_suggest[sapply(length(df_longer$cuanti_palabras_suggest == 0))],\n         #                                   NA,\n#                                            cuanti_palabras_suggest)\n\ndf_longer <- df_longer |>\nmutate(cuanti_palabras_pre_stem = map(cuanti_palabras_suggest,1))\n\ndf_longer$cuanti_palabras_pre_stem[sapply(df_longer$cuanti_palabras_pre_stem, is.null)] <- NA\n\ndf_longer <- df_longer |>\nmutate(cuanti_palabras_pre_stem = unlist(cuanti_palabras_pre_stem))\n\n# Stemming\n# Así como para las stopwords hice un archivo específico ahora hago un\n# diccionario que agrega más palabras al original\n# Hay que tener cuidado porque \"quanteda\" pisa a dictionary de \"hunspell\"\n\ndf_longer <- df_longer |>\nmutate(cuanti_palabras_stem = hunspell_stem(cuanti_palabras_pre_stem, dict = cuanti_diccionario))\n\ndf_longer <- df_longer |>\nmutate(cuanti_palabras_stem = map(cuanti_palabras_stem,1))\n\ndf_longer$cuanti_palabras_stem[sapply(df_longer$cuanti_palabras_stem, is.null)] <- NA\n\ndf_longer <- df_longer |>\nmutate(cuanti_palabras_stem = unlist(cuanti_palabras_stem))\n\n# Arreglo a mano algunos pequeños casos\n\ndf_longer <-  df_longer |>\nmutate(\ncuanti_palabras_pre_stem = str_replace(cuanti_palabras_pre_stem, \"métodos\", \"método\"),\ncuanti_palabras_pre_stem = str_replace(cuanti_palabras_pre_stem, \"cantidades\", \"cantidad\"),\ncuanti_palabras_pre_stem = str_replace(cuanti_palabras_pre_stem, \"estadísticas\", \"estadística\"),\ncuanti_palabras_pre_stem = str_replace(cuanti_palabras_pre_stem, \"encuestas\", \"encuesta\"),\ncuanti_palabras_pre_stem = str_replace(cuanti_palabras_pre_stem, \"técnicas\", \"técnica\"),\ncuanti_palabras_pre_stem = str_replace(cuanti_palabras_pre_stem, \"porcentajes\", \"porcentaje\"),\ncuanti_palabras_pre_stem = str_replace(cuanti_palabras_pre_stem, \"cuentas\", \"contar\"))      \n\n          \n#cuanti_palabras_ok = stringi::stri_trans_general(cuanti_palabras_ok, \"Latin-ASCII\")), # Saco los acentos\n\n#df_longer <- df_longer |>\n#mutate(\n#cuanti_palabras_hunspell = hunspell_stem(cuanti_palabras_ok, dict = cuanti_diccionario))\n\n\n#cuanti_palabras_snowballc = wordStem(cuanti_palabras, language = \"spanish\"))\n\n#cuanti_palabras_hunspell_check = hunspell_check(cuanti_palabras, dict = dictionary(\"es_ES\")),\n```\n\n## Primeras aproximaciones\n\nDado que los pasos anteriores nos permitieron estructurar bastante los datos, ahora es más fácil realizar los típicos análisis que se realizan a los datos estructurados. Para comenzar vamos a realizar una simple tabla de conteo, con su respectivo porcentaje, y luego vamos a realizar un gráfico de barras. Finalmente realizaremos una nube de palabras.\n\n```{r tablas_conteos}\n#| echo: false\n#| output: true\n\nlibrary(dplyr)\nlibrary(gt)\n\nconteo_palabras_general <- df_longer |>\nfilter(!is.na(cuanti_palabras_pre_stem)) |>\n  count(cuanti_palabras_pre_stem) |>\n  arrange(desc(n)) |>\n  filter(n > 1) |>\n  mutate(Porcentaje = n/sum(n))\n\ngt_palabras <- conteo_palabras_general |>\n  gt() |>\n  tab_header(title = \"Frecuencia y porcentajes de palabras\") |>\n  cols_label(cuanti_palabras_pre_stem = \"Palabra\",\n             n = \"Cantidad\") |>\n  fmt_percent(columns = Porcentaje)\n\ngt_palabras\n        \n```\n\nComo en muchas otras situaciones, lo que se puede mostrar en forma de tabla también se puede graficar con algún tipo de gráfico. En este caso haremos un gráfico de barras con los datos anteriores.\n\n```{r grafico_conteo}\n#| echo: false\n#| output: true\n\nlibrary(ggplot2)\n\ngrafico_conteo <- conteo_palabras_general |>\nmutate(cuanti_palabras_pre_stem = fct_reorder(cuanti_palabras_pre_stem, n)) |>\nggplot(aes(cuanti_palabras_pre_stem, Porcentaje)) +\n       geom_col() + \n      labs(x = \"Palabras\") +\n      scale_y_continuous(labels = scales::percent) +\n       coord_flip()\n       \ngrafico_conteo\n```\n\n## Nube de palabras\n\nLa nube de palabras es una técnica de visualización que funciona bien cuando los insumos son palabras y estan presentan una gran heterogeneidad en los valores de sus frecuencias.\n\n```{r text_nube_general}\n#| echo: false\n#| output: true\n\nlibrary(ggwordcloud)\n\nnube_palabras <- ggplot(conteo_palabras_general, \n       aes(label = cuanti_palabras_pre_stem, \n           size = n,\n           color = n)) +\n  geom_text_wordcloud(area_corr = TRUE) +\n  scale_size_area(max_size = 20) +\n  labs(title = \"Nube de palabras\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\nnube_palabras\n```\n\n## Análisis bivariado de palabras\n\n```{r text_bivariado}\n#| echo: false\n#| output: true\n\n# Es más cómodo \"ensanchar\" la base luego del análisis para facilitar la tabla\n\nconteo_palabras_grupo <- df_longer |>\nfilter(!is.na(cuanti_palabras_pre_stem)) |>\n group_by(unaj_n_materias_aprobadas_15) |>\n  count(cuanti_palabras_pre_stem) |>\n  arrange(desc(n)) |>\n  filter(n > 1) |>\n  mutate(Porcentaje = n/sum(n)) |>\n  select(!n) |>\n  pivot_wider(names_from = unaj_n_materias_aprobadas_15,\n              values_from = Porcentaje)\n\ngt_palabras_grupo <- conteo_palabras_grupo |>\n  gt() |>\n  tab_header(title = \"Frecuencia y porcentajes de palabras según cantidad de materias aprobadas\") |>\n  cols_label(cuanti_palabras_pre_stem = \"Palabra\") |>\n    tab_spanner(\n    label = \"Cantidad de materias aprobadas\",\n    columns = c(\"Hasta 15\", \"Más de 15\")) |>\n  fmt_percent(columns = c(\"Hasta 15\", \"Más de 15\"))\n              \n\ngt_palabras_grupo\n```\n\n```{r nube_palabras_grupo}\n#| echo: false\n#| output: true\n\nconteo_palabras_grupo <- df_longer |>\nfilter(!is.na(cuanti_palabras_pre_stem)) |>\n  group_by(unaj_n_materias_aprobadas_15) |>\n  count(cuanti_palabras_pre_stem) |>\n  arrange(desc(n)) |>\n  filter(n > 1) |>\n  mutate(Porcentaje = n/sum(n))\n\n nube_palabras_grupo <- ggplot(conteo_palabras_grupo, \n       aes(label = cuanti_palabras_pre_stem, \n           size = n,\n           color = n)) +\n  geom_text_wordcloud(area_corr = TRUE) +\n  scale_size_area(max_size = 10) +\n  labs(title = \"Nube de palabra según cantidad de materias aprobadas\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  facet_wrap(~unaj_n_materias_aprobadas_15)\n \n nube_palabras_grupo\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","embed-resources":true,"output-file":"text.html"},"language":{},"metadata":{"lang":"es","fig-responsive":true,"quarto-version":"1.2.335","bibliography":["bibliography.bib"],"editor":"visual","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"text.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["bibliography.bib"],"editor":"visual","lang":"es","documentclass":"scrreprt"},"extensions":{"book":{}}}}}